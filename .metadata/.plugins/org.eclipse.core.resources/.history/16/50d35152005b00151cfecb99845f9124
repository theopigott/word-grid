import java.util.ArrayList;
import java.util.Collections;


public class WordGrid {
	int n;
	int m;
	Square[][] squares;
	WordChecker dict;
	int minLength;
	
	private WordGrid(int n, int m, int minLength) {
		this.n = n;
		this.m = m;
		this.minLength = minLength;
		this.dict = new WordChecker();
	}
	
	public static void main(String[] args) {
		WordGrid grid = new WordGrid(5, 5, 3);
		grid.initialise();
		for (int x = 0; x < grid.n; x++) {
			for (int y = 0; y < grid.m; y++) {
				System.out.print(grid.squares[x][y] + " ");
			}
			System.out.println();
		}
//		for (int i = 0; i < 3; i++) {
//			System.out.println(grid.dict.list.get(i));
//		}
		ArrayList<String> words = (ArrayList<String>) Collections.sort(grid.findWords());
		Square sq = grid.squares[0][0];
		System.out.println();
		while (sq != null) {
			System.out.print(sq + " ");
			sq = sq.next;
		}
		System.out.println("\n \n Found words:");
		for (String word : words) {
			System.out.println(word);
		}
	}
	
	private void initialise() {
		RandomLetter rl = new RandomLetter();
		// Setup squares
		squares = new Square[n][m];
		for (int x = 0; x < n; x++) {
			for (int y = 0; y < m; y++) {
				squares[x][y] = new Square(x, y, rl.next());
			}
		}
		// Set next and neighbours
		for (int x = 0; x < n; x++) {
			for (int y = 0; y < m; y++) {
				Square sq = squares[x][y];
				// Set next square
				if (y < m-1) {
					sq.next = squares[x][y+1];
				}
				else if (x < n-1) {
					sq.next = squares[x+1][0];
				}
				else sq.next = null;
				
				// Set neighbours
				for (int i = -1; i <= 1; i++) {
					for (int j = -1; j <= 1; j++) {
						if (i == 0 && j == 0) continue;
						int xN = x + i;
						int yN = y + j;
						if (xN >= 0 && xN < n && yN >= 0 && yN < m) {
							sq.neighbours.add(squares[xN][yN]);
						}
					}
				}
			}
		}
	}
	
	private ArrayList<String> findWords() {
		ArrayList<String> words = new ArrayList<String>();
		Square square = squares[0][0];
		do {
			square.search("", words, dict, minLength);
			square = square.next;
		} while (square != null);
		return words;
	}

}
